name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        load: true
        tags: tor-hidden-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --name tor-test -d tor-hidden-service:test
        sleep 5
        docker logs tor-test
        docker stop tor-test
        docker rm tor-test
    
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        load: true
        tags: tor-hidden-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.26.0
      with:
        image-ref: 'tor-hidden-service:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
  publish:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Tor version
      id: tor_version
      run: |
        TOR_VERSION=$(grep -oP 'TOR_VERSION=\K[^"]+' Dockerfile)
        echo "TOR_VERSION=$TOR_VERSION" >> $GITHUB_ENV
        echo "tor_version=$TOR_VERSION" >> $GITHUB_OUTPUT
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/tor-hidden-service
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=tor-${{ env.TOR_VERSION }},enable=${{ env.TOR_VERSION != '' }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          org.opencontainers.image.title=Tor Hidden Service
          org.opencontainers.image.description=Docker container for running Tor hidden services & Tor proxy
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/blob/main/README.md
          org.opencontainers.image.version=${{ env.TOR_VERSION }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
          com.github.actions.tor.version=${{ env.TOR_VERSION }}
          org.label-schema.vcs-url=${{ github.server_url }}/${{ github.repository }}
          org.label-schema.vcs-ref=${{ github.sha }}